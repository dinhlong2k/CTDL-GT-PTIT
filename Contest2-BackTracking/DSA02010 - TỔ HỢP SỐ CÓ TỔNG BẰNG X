Cho mảng A[] gồm N số nguyên dương phân biệt và số X. Nhiệm vụ của bạn là tìm phép tổ hợp các số trong mảng A[] có tổng bằng X. Các số trong mảng A[] có thể được sử dụng nhiều lần. Mỗi tổ hợp các số của mảng A[] được in ra theo thứ tự không giảm các số. Ví dụ với A[] = {2, 4, 6, 8}, X = 8 ta có các tổ hợp các số như sau:

[2, 2, 2, 2], [2, 2, 4], [2, 6], [4, 4], [8].

Input:

Dòng đầu tiên đưa vào số lượng bộ test T.
Những dòng kế tiếp đưa vào các bộ test. Mỗi bộ test gồm hai phần: phần thứ nhất là hai số N và X; dòng tiếp theo đưa vào N số của mmảng A[]; các số được viết cách nhau một vài khoảng trống.
T, N, X, A[i] thỏa mãn ràng buộc: 1≤T ≤10; 1≤X, A[i]≤100. N ≤ 20.
Output:

Đưa ra kết quả mỗi test theo từng dòng. Mỗi đường tổ hợp được bao bởi cặp ký tự [, ]. Đưa ra -1 nếu không có tổ hợp nào thỏa mãn yêu cầu bài toán.

Input
1
4  8

2  4  6  8

Output
[2 2 2 2][2 2 4][2 6][4 4][8]


#include<bits/stdc++.h>

using namespace std;

int n,k,a[105];
vector< vector<int> > dem;

void Try(int i,int sum,vector<int> vt){
	if(sum>k) return;
	if(sum==k){
		dem.push_back(vt);
		return;
	}
	for(int j=i;j<=n;j++){
		if(sum + a[j] <= k){
			vt.push_back(a[j]);
			Try(j,sum+a[j],vt);
			vt.pop_back();
		}
	}
}

int main(){
	int t;
	cin>>t;
	while(t--){
		cin>>n>>k;
		for(int i=1;i<=n;i++){
			cin>>a[i];
		}
		sort(a+1,a+n+1);
		vector<int> vt; vt.clear();
		dem.clear();
		Try(1,0,vt);
		if(dem.size()==0) {
			cout<<-1<<endl;
			continue;	
		}
		for(int i=0;i<dem.size();i++){
			cout<<"[";
			for(int j=0;j<dem[i].size();j++){
				if(j==dem[i].size()-1) cout<<dem[i][j]<<"]";
				else cout<<dem[i][j]<<" ";
			}
		}
		cout<<endl;
	}
}
