Cho một mê cung bao gồm các khối được biểu diễn như một ma trận nhị phân A[N][N]. Một con chuột đi từ ô đầu tiên góc trái (A[0][0]) đến ô cuối cùng góc phải (A[N-1][N-1]) theo nguyên tắc:

Down (D): Chuột được phép xuống dưới nếu ô dưới nó có giá trị 1.
Right (R): Chuột được phép sang phải dưới nếu ô bên phải nó có giá trị 1.
Hãy đưa ra một hành trình của con chuột trên mê cung. Đưa ra -1 nếu chuột không thể đi đến đích.

                        https://www.geeksforgeeks.org/wp-content/uploads/ratinmaze_filled_path1.png

Input:

Dòng đầu tiên đưa vào số lượng bộ test T.
Những dòng kế tiếp đưa vào các bộ test. Mỗi bộ test gồm hai phần: phần thứ nhất đưa vào số N là kích cỡ của mê cung; dòng tiếp theo đưa vào ma trận nhị phân A[N][N].
T, N, A[i][j] thỏa mãn ràng buộc: 1≤T ≤10; 2≤N≤10; 0≤A[i][j] ≤1.
Output:

Đưa ra tất cả đường đi của con chuột trong mê cung theo thứ tự từ điển. Đưa ra -1 nếu chuột không đi được đến đích.


Input

2

4

1  0  0  0

1  1  0  1 

0  1  0  0 

1  1  1  1

5

1 0 0 0 0

1 1 1 1 1

1 1 0 0 1

0 1 1 1 1

0 0 0 1 1

Output:

DRDDRR

DDRDRRDR DDRDRRRD DRDDRRDR DRDDRRRD DRRRRDDD

#include<bits/stdc++.h>
#include<vector>
using namespace std;
int n,a[100][100],b[100][100];
vector<string> arrays;
void Try(int i,int j,string s){
	if(i==n-1 && j==n-1){
		arrays.push_back(s);
	}else{
		if(a[i][j+1]==1 && j!=n-1 && b[i][j+1]==0 ){
			b[i][j]=1;
			Try(i,j+1,s+"R");
			b[i][j]=0;
		}		
		if(a[i+1][j]==1 && i!=n-1 && b[i+1][j]==0){
			b[i][j]=1;
			Try(i+1,j,s+"D");
			b[i][j]=0;
		}
	}
}

int main(){
	int t;
	cin>>t;
	while(t--){
		arrays.clear();
		cin>>n;
		for(int i=0;i<n;i++){
			for(int j=0;j<n;j++){
				cin>>a[i][j];
				b[i][j]=0;
			}
		}
		if(a[0][0] == 0 || a[n-1][n-1] == 0) cout<<-1<<endl;
		else{
			Try(0,0,"");
			if(arrays.size()==0) cout<<-1<<endl;
			else{
				sort(arrays.begin(), arrays.end());
                for(int i = 0; i < arrays.size(); i++)
                cout<<arrays[i]<<" ";
                cout<<endl;
			}
		}
		
	}
}
