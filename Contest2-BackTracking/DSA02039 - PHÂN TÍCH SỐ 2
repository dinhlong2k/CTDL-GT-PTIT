Cho số nguyên dương N. Nhiệm vụ của bạn là hãy liệt kê tất cả các cách phân tích số tự nhiên N thành tổng các số tự nhiên nhỏ hơn hoặc bằng N. Phép hoán vị của một cách được xem là giống nhau. Ví dụ với N = 5 ta có kết quả là: (5), (4, 1), (3, 2), (3, 1, 1), (2, 2, 1), (2, 1, 1, 1), (1, 1, 1, 1, 1) .

Input:

Dòng đầu tiên đưa vào số lượng test T.
Những dòng kế tiếp đưa vào các bộ test. Mỗi bộ test là một số tự nhiên N được viết trên một dòng.
T, n thỏa mãn ràng buộc: 1≤T, N≤10.
Output:

Dòng đầu tiên là số lượng cách phân tích thỏa mãn. Dòng tiếp theo liệt kê đáp án theo mẫu ví dụ đã cho.


Input
2

4

5

Output

5

(4) (3 1) (2 2) (2 1 1) (1 1 1 1)

7

(5) (4 1) (3 2) (3 1 1) (2 2 1) (2 1 1 1) (1 1 1 1 1)



#include<bits/stdc++.h>

using namespace std;
int n,k,a[100];
bool stop;
vector< vector<int> > dem;
vector<int> vt;
void init(){
	cin>>n;
	k=1;
	a[k]=n;
}

void res(){
	for(int i=1;i<=k;i++){
		vt.push_back(a[i]);
	}
	dem.push_back(vt);
}

void sinh(){
	int i=k;
	while(i>0 && a[i]==1) i-=1;
	if(i<=0) stop=true;
	else{
		a[i]-=1;
		int d=k-i+1;
		k=i;
		for(int j=i+1;j<=i+d/a[i];j++){
			a[j]=a[i];
		}
		k+=d/a[i];
		if(d%a[i]){
			a[++k] =d%a[i];
		}
	}
}

void run(){
	stop=false;
	while(!stop){
		vt.clear();
		res();
		sinh();
	}
}

int main(){
	int t;
	cin>>t;
	while(t--){
		dem.clear();
		init();
		run();
		cout<<dem.size()<<endl;
		for(int i=0;i<dem.size();i++){
			cout<<"(";
			for(int j=0;j<dem[i].size();j++){
				if(j==dem[i].size()-1) cout<<dem[i][j];
				else	cout<<dem[i][j]<<" ";
				
			}
			cout<<") ";
		}
		cout<<endl;
	}
}
